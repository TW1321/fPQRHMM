getwd()
library(fPQRHMMal)
install.packages('roxygen2')
libary(roxygen2)
library(roxygen2)
?roxygen2
roxygen2('hello.R')
document()
install.packages('dev_tools')
install.packages('devtools')
library(devtools)
install.packages('procossx')
install.packages('processx')
install.packages('devtools')
library(devtools)
library(devtools)
?document
document()
document()
document()
?plot
?mean
document()
document()
?fPQR_fit
document()
document()
?fPQR_fit
document()
document()
document()
?lm
X_0=mvrnorm(100, mu=rep(0,100), Sigma=diag(100))
beta=rep(1,100)
Y_0= X_0%*%beta+rnorm(100)
library(mvrnorm)
?mvrnorm
library(MASS)
X_0=mvrnorm(100, mu=rep(0,100), Sigma=diag(100))
beta=rep(1,100)
Y_0= X_0%*%beta+rnorm(100)
l.m=lm(Y_0~X_0)
l.m$coefficients
document()
usethis::use_testthat()
getwd()
document()
?test_check
?test_dir
library(fPQRHMMal)
?loaded_package
?load_package
??load_package
library(fPQRHMMal)
?fPQR_fit
library(fPQRHMMal)
document()
library(fPQRHMMal)
document()
library(fPQRHMMal)
library(fPQRHMMal)
document()
library(fPQRHMMal)
X_0
fPQR_fit(X_0, Y_0, 0.5)
document()
library(fPQRHMMal)
document()
library(fPQRHMMal)
check_lossTE
?check_lossTE
library(fPQRHMMal)
document()
document()
library(fPQRHMMal)
document()
library(fPQRHMMal)
document()
library(fPQRHMMal)
document()
document()
library(fPQRHMMal)
?lm
document()
library(fPQRHMMal)
document()
library(fPQRHMMal)
install.packages('testthat')
library(fPQRHMMal)
a=fPQR_fit(X_0, Y_0, 0.5)
a
a=qcov_li(X_0, Y_0, 0.5)
a
?fPQR_fit
?qcov_li
?signflip_svd
?lm
>?fPQR_fit
?fPQR_fit
?lm
document()
install.package(fPQRHMMal)
install.packages('fPQRHMMal')
install.packages("fPQRHMMal")
library(fPQRHMMal)
?fPQR_fit
document()
getwd()
install.packages('devtools')
library(devtools)
document()
library(fPQRHMMal)
$fPQR_fit
?fPQR_fit
document()
document()
library(fPQRHMMal)
fPQR_fit
?fPQR_fit
library(MASS)
X_0=mvrnorm(100, mu=rep(0,100), Sigma=diag(100))
beta=rep(1,100)
Y_0= X_0%*%beta+rnorm(100)
fPQR_mod= fPQR_fit(X_0, Y_0, 0.5)
fPQR_mod
?qcov_li
X_0=mvrnorm(100, mu=rep(0,100), Sigma=diag(100))
beta=rep(1,100)
Y_0= X_0%*%beta+rnorm(100)
fPQR_mod= fPQR_fit(X_0, Y_0, 0.5)
qcov_li(X_0,Y_0)
qcov_li(X_0,Y_0,0.5)
l=qcov_li(X_0,Y_0,0.5)
l
?signflip_svd
X=mvrnorm(100, mu=rep(0,100), Sigma=diag(100))
svd_X=svd(X)
col_weight=svd_X$u[,1]
row_weight=svd_X$v[1,]
flip_weights=signflip_svd(col_weight, row_weight)
flip_weights
?check_lossTE
library(MASS)
X_0=mvrnorm(100, mu=rep(0,100), Sigma=diag(100))
beta=rep(1,100)
Y_0= X_0%*%beta+rnorm(100)
fPQR_mod= fPQR_fit(X_0, Y_0, 0.5)
est_coef=fPQR_mod[[1]]
check_losserror=check_lossTE(est_coef, X_0, Y_0,0.5)
check_losserror
document()
library(fPQRHMMal)
?fPQR_fit
?qcov_li
?signflip_svd
?check_lossTE
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
getwd()
document()
document()
document()
library(devtools)
document()
library(fPQRHMMal)
document()
libary(testthat)
library(testthat)
document()
library(fPQRHMMal)
document()
library(fPQRHMMal)
install.packages(fPQRHMM)
install.packages('fPQRHMM')
library('fPQRHMM')
library(fPQRHMM)
?devtools
devtools::fPQRHMM
getwd()
install.packages(fPQRHMMal)
install.packages('fPQRHMMal')
install.packages("fPQRHMMal")
?fPQR_fit
??fPQR_fit
document()
library(devtools)
document()
document()
install.packages('fPQRHMMal')
install.packages("fPQRHMMal")
document()
library(devtools)
document()
install.packages('fPQRHMMal')
install.packages("fPQRHMMal")
document()
library(devtools)
document()
library(fPQRHMMal)
getwd()
getwd(\)
getwd()
wd()
git remote add origin https://github.com/TW1321/fPQRHMM.git
git remote add origin https://github.com/TW1321/fPQRHMM.git
devtools::install_github("TW1321/fPQRHMM")
devtools::install_github("TW1321/fPQRHMM")
library(fPQRHMMal)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
X_0=mvrnorm(100, mu=rep(0,100), Sigma=diag(100))
beta=rep(1,101)
Y_0= beta[1]+ X_0%*%beta[-1] + rnorm(100)
mod=fPQR_fit(X_0,Y_0,0.5)
as.matrix(mod[[1]])
as.matrix(beta)
nrow(mod[[1]])
nrow(beta)
nrow(as.matrix(beta))
?legend
knitr::opts_chunk$set(echo = TRUE)
# quantile covarince plot
matplot(as.matrix(seq(0.1,0.9,by=0.1)), corr_predresp,type="b", pch=1, col=1:46, xlab= 'Quantile predicted', ylab= 'Quantile Covariance', fig.caption="This is aplot Quantile Covariance of each predictor from the baseball dataset with the response Runs Allowed. The red dashed Line indicates the variable pitcherfWAR")
?signflip_svd
?signflip_svd
